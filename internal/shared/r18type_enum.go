// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package shared

import (
	"fmt"
	"strings"
)

const (
	// R18TypeNone is a R18Type of type None.
	R18TypeNone R18Type = iota
	// R18TypeR18 is a R18Type of type R18.
	R18TypeR18
	// R18TypeAll is a R18Type of type All.
	R18TypeAll
)

var ErrInvalidR18Type = fmt.Errorf("not a valid R18Type, try [%s]", strings.Join(_R18TypeNames, ", "))

const _R18TypeName = "noner18all"

var _R18TypeNames = []string{
	_R18TypeName[0:4],
	_R18TypeName[4:7],
	_R18TypeName[7:10],
}

// R18TypeNames returns a list of possible string values of R18Type.
func R18TypeNames() []string {
	tmp := make([]string, len(_R18TypeNames))
	copy(tmp, _R18TypeNames)
	return tmp
}

// R18TypeValues returns a list of the values for R18Type
func R18TypeValues() []R18Type {
	return []R18Type{
		R18TypeNone,
		R18TypeR18,
		R18TypeAll,
	}
}

var _R18TypeMap = map[R18Type]string{
	R18TypeNone: _R18TypeName[0:4],
	R18TypeR18:  _R18TypeName[4:7],
	R18TypeAll:  _R18TypeName[7:10],
}

// String implements the Stringer interface.
func (x R18Type) String() string {
	if str, ok := _R18TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("R18Type(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x R18Type) IsValid() bool {
	_, ok := _R18TypeMap[x]
	return ok
}

var _R18TypeValue = map[string]R18Type{
	_R18TypeName[0:4]:                   R18TypeNone,
	strings.ToLower(_R18TypeName[0:4]):  R18TypeNone,
	_R18TypeName[4:7]:                   R18TypeR18,
	strings.ToLower(_R18TypeName[4:7]):  R18TypeR18,
	_R18TypeName[7:10]:                  R18TypeAll,
	strings.ToLower(_R18TypeName[7:10]): R18TypeAll,
}

// ParseR18Type attempts to convert a string to a R18Type.
func ParseR18Type(name string) (R18Type, error) {
	if x, ok := _R18TypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _R18TypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return R18Type(0), fmt.Errorf("%s is %w", name, ErrInvalidR18Type)
}
