// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package shared

import (
	"fmt"
	"strings"
)

const (
	// ArtworkStatusCached is a ArtworkStatus of type cached.
	ArtworkStatusCached ArtworkStatus = "cached"
	// ArtworkStatusPosting is a ArtworkStatus of type posting.
	ArtworkStatusPosting ArtworkStatus = "posting"
	// ArtworkStatusPosted is a ArtworkStatus of type posted.
	ArtworkStatusPosted ArtworkStatus = "posted"
)

var ErrInvalidArtworkStatus = fmt.Errorf("not a valid ArtworkStatus, try [%s]", strings.Join(_ArtworkStatusNames, ", "))

var _ArtworkStatusNames = []string{
	string(ArtworkStatusCached),
	string(ArtworkStatusPosting),
	string(ArtworkStatusPosted),
}

// ArtworkStatusNames returns a list of possible string values of ArtworkStatus.
func ArtworkStatusNames() []string {
	tmp := make([]string, len(_ArtworkStatusNames))
	copy(tmp, _ArtworkStatusNames)
	return tmp
}

// ArtworkStatusValues returns a list of the values for ArtworkStatus
func ArtworkStatusValues() []ArtworkStatus {
	return []ArtworkStatus{
		ArtworkStatusCached,
		ArtworkStatusPosting,
		ArtworkStatusPosted,
	}
}

// String implements the Stringer interface.
func (x ArtworkStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ArtworkStatus) IsValid() bool {
	_, err := ParseArtworkStatus(string(x))
	return err == nil
}

var _ArtworkStatusValue = map[string]ArtworkStatus{
	"cached":  ArtworkStatusCached,
	"posting": ArtworkStatusPosting,
	"posted":  ArtworkStatusPosted,
}

// ParseArtworkStatus attempts to convert a string to a ArtworkStatus.
func ParseArtworkStatus(name string) (ArtworkStatus, error) {
	if x, ok := _ArtworkStatusValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _ArtworkStatusValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return ArtworkStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidArtworkStatus)
}
