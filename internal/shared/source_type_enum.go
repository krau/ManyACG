// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package shared

import (
	"fmt"
	"strings"
)

const (
	// SourceTypePixiv is a SourceType of type pixiv.
	SourceTypePixiv SourceType = "pixiv"
	// SourceTypeTwitter is a SourceType of type twitter.
	SourceTypeTwitter SourceType = "twitter"
	// SourceTypeBilibili is a SourceType of type bilibili.
	SourceTypeBilibili SourceType = "bilibili"
	// SourceTypeDanbooru is a SourceType of type danbooru.
	SourceTypeDanbooru SourceType = "danbooru"
	// SourceTypeKemono is a SourceType of type kemono.
	SourceTypeKemono SourceType = "kemono"
	// SourceTypeYandere is a SourceType of type yandere.
	SourceTypeYandere SourceType = "yandere"
	// SourceTypeNhentai is a SourceType of type nhentai.
	SourceTypeNhentai SourceType = "nhentai"
)

var ErrInvalidSourceType = fmt.Errorf("not a valid SourceType, try [%s]", strings.Join(_SourceTypeNames, ", "))

var _SourceTypeNames = []string{
	string(SourceTypePixiv),
	string(SourceTypeTwitter),
	string(SourceTypeBilibili),
	string(SourceTypeDanbooru),
	string(SourceTypeKemono),
	string(SourceTypeYandere),
	string(SourceTypeNhentai),
}

// SourceTypeNames returns a list of possible string values of SourceType.
func SourceTypeNames() []string {
	tmp := make([]string, len(_SourceTypeNames))
	copy(tmp, _SourceTypeNames)
	return tmp
}

// SourceTypeValues returns a list of the values for SourceType
func SourceTypeValues() []SourceType {
	return []SourceType{
		SourceTypePixiv,
		SourceTypeTwitter,
		SourceTypeBilibili,
		SourceTypeDanbooru,
		SourceTypeKemono,
		SourceTypeYandere,
		SourceTypeNhentai,
	}
}

// String implements the Stringer interface.
func (x SourceType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SourceType) IsValid() bool {
	_, err := ParseSourceType(string(x))
	return err == nil
}

var _SourceTypeValue = map[string]SourceType{
	"pixiv":    SourceTypePixiv,
	"twitter":  SourceTypeTwitter,
	"bilibili": SourceTypeBilibili,
	"danbooru": SourceTypeDanbooru,
	"kemono":   SourceTypeKemono,
	"yandere":  SourceTypeYandere,
	"nhentai":  SourceTypeNhentai,
}

// ParseSourceType attempts to convert a string to a SourceType.
func ParseSourceType(name string) (SourceType, error) {
	if x, ok := _SourceTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _SourceTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return SourceType(""), fmt.Errorf("%s is %w", name, ErrInvalidSourceType)
}
