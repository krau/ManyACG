// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package shared

import (
	"fmt"
	"strings"
)

const (
	// TelegramMediaTypePhoto is a TelegramMediaType of type photo.
	TelegramMediaTypePhoto TelegramMediaType = "photo"
	// TelegramMediaTypeDocument is a TelegramMediaType of type document.
	TelegramMediaTypeDocument TelegramMediaType = "document"
	// TelegramMediaTypeVideo is a TelegramMediaType of type video.
	TelegramMediaTypeVideo TelegramMediaType = "video"
)

var ErrInvalidTelegramMediaType = fmt.Errorf("not a valid TelegramMediaType, try [%s]", strings.Join(_TelegramMediaTypeNames, ", "))

var _TelegramMediaTypeNames = []string{
	string(TelegramMediaTypePhoto),
	string(TelegramMediaTypeDocument),
	string(TelegramMediaTypeVideo),
}

// TelegramMediaTypeNames returns a list of possible string values of TelegramMediaType.
func TelegramMediaTypeNames() []string {
	tmp := make([]string, len(_TelegramMediaTypeNames))
	copy(tmp, _TelegramMediaTypeNames)
	return tmp
}

// TelegramMediaTypeValues returns a list of the values for TelegramMediaType
func TelegramMediaTypeValues() []TelegramMediaType {
	return []TelegramMediaType{
		TelegramMediaTypePhoto,
		TelegramMediaTypeDocument,
		TelegramMediaTypeVideo,
	}
}

// String implements the Stringer interface.
func (x TelegramMediaType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TelegramMediaType) IsValid() bool {
	_, err := ParseTelegramMediaType(string(x))
	return err == nil
}

var _TelegramMediaTypeValue = map[string]TelegramMediaType{
	"photo":    TelegramMediaTypePhoto,
	"document": TelegramMediaTypeDocument,
	"video":    TelegramMediaTypeVideo,
}

// ParseTelegramMediaType attempts to convert a string to a TelegramMediaType.
func ParseTelegramMediaType(name string) (TelegramMediaType, error) {
	if x, ok := _TelegramMediaTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _TelegramMediaTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return TelegramMediaType(""), fmt.Errorf("%s is %w", name, ErrInvalidTelegramMediaType)
}
