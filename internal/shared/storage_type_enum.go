// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package shared

import (
	"fmt"
	"strings"
)

const (
	// StorageTypeWebdav is a StorageType of type webdav.
	StorageTypeWebdav StorageType = "webdav"
	// StorageTypeLocal is a StorageType of type local.
	StorageTypeLocal StorageType = "local"
	// StorageTypeAlist is a StorageType of type alist.
	StorageTypeAlist StorageType = "alist"
	// StorageTypeTelegram is a StorageType of type telegram.
	StorageTypeTelegram StorageType = "telegram"
)

var ErrInvalidStorageType = fmt.Errorf("not a valid StorageType, try [%s]", strings.Join(_StorageTypeNames, ", "))

var _StorageTypeNames = []string{
	string(StorageTypeWebdav),
	string(StorageTypeLocal),
	string(StorageTypeAlist),
	string(StorageTypeTelegram),
}

// StorageTypeNames returns a list of possible string values of StorageType.
func StorageTypeNames() []string {
	tmp := make([]string, len(_StorageTypeNames))
	copy(tmp, _StorageTypeNames)
	return tmp
}

// StorageTypeValues returns a list of the values for StorageType
func StorageTypeValues() []StorageType {
	return []StorageType{
		StorageTypeWebdav,
		StorageTypeLocal,
		StorageTypeAlist,
		StorageTypeTelegram,
	}
}

// String implements the Stringer interface.
func (x StorageType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StorageType) IsValid() bool {
	_, err := ParseStorageType(string(x))
	return err == nil
}

var _StorageTypeValue = map[string]StorageType{
	"webdav":   StorageTypeWebdav,
	"local":    StorageTypeLocal,
	"alist":    StorageTypeAlist,
	"telegram": StorageTypeTelegram,
}

// ParseStorageType attempts to convert a string to a StorageType.
func ParseStorageType(name string) (StorageType, error) {
	if x, ok := _StorageTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _StorageTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return StorageType(""), fmt.Errorf("%s is %w", name, ErrInvalidStorageType)
}
