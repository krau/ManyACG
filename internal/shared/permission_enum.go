// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package shared

import (
	"fmt"
	"strings"
)

const (
	// PermissionSudo is a Permission of type sudo.
	PermissionSudo Permission = "sudo"
	// PermissionPostArtwork is a Permission of type post_artwork.
	PermissionPostArtwork Permission = "post_artwork"
	// PermissionDeleteArtwork is a Permission of type delete_artwork.
	PermissionDeleteArtwork Permission = "delete_artwork"
	// PermissionGetArtworkInfo is a Permission of type get_artwork_info.
	PermissionGetArtworkInfo Permission = "get_artwork_info"
	// PermissionEditArtwork is a Permission of type edit_artwork.
	PermissionEditArtwork Permission = "edit_artwork"
)

var ErrInvalidPermission = fmt.Errorf("not a valid Permission, try [%s]", strings.Join(_PermissionNames, ", "))

var _PermissionNames = []string{
	string(PermissionSudo),
	string(PermissionPostArtwork),
	string(PermissionDeleteArtwork),
	string(PermissionGetArtworkInfo),
	string(PermissionEditArtwork),
}

// PermissionNames returns a list of possible string values of Permission.
func PermissionNames() []string {
	tmp := make([]string, len(_PermissionNames))
	copy(tmp, _PermissionNames)
	return tmp
}

// PermissionValues returns a list of the values for Permission
func PermissionValues() []Permission {
	return []Permission{
		PermissionSudo,
		PermissionPostArtwork,
		PermissionDeleteArtwork,
		PermissionGetArtworkInfo,
		PermissionEditArtwork,
	}
}

// String implements the Stringer interface.
func (x Permission) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Permission) IsValid() bool {
	_, err := ParsePermission(string(x))
	return err == nil
}

var _PermissionValue = map[string]Permission{
	"sudo":             PermissionSudo,
	"post_artwork":     PermissionPostArtwork,
	"delete_artwork":   PermissionDeleteArtwork,
	"get_artwork_info": PermissionGetArtworkInfo,
	"edit_artwork":     PermissionEditArtwork,
}

// ParsePermission attempts to convert a string to a Permission.
func ParsePermission(name string) (Permission, error) {
	if x, ok := _PermissionValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _PermissionValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Permission(""), fmt.Errorf("%s is %w", name, ErrInvalidPermission)
}
