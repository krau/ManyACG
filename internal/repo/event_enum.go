// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package repo

import (
	"fmt"
	"strings"
)

const (
	// EventTypeArtworkCreate is a EventType of type artwork_create.
	EventTypeArtworkCreate EventType = "artwork_create"
	// EventTypeArtworkUpdate is a EventType of type artwork_update.
	EventTypeArtworkUpdate EventType = "artwork_update"
	// EventTypeArtworkDelete is a EventType of type artwork_delete.
	EventTypeArtworkDelete EventType = "artwork_delete"
)

var ErrInvalidEventType = fmt.Errorf("not a valid EventType, try [%s]", strings.Join(_EventTypeNames, ", "))

var _EventTypeNames = []string{
	string(EventTypeArtworkCreate),
	string(EventTypeArtworkUpdate),
	string(EventTypeArtworkDelete),
}

// EventTypeNames returns a list of possible string values of EventType.
func EventTypeNames() []string {
	tmp := make([]string, len(_EventTypeNames))
	copy(tmp, _EventTypeNames)
	return tmp
}

// EventTypeValues returns a list of the values for EventType
func EventTypeValues() []EventType {
	return []EventType{
		EventTypeArtworkCreate,
		EventTypeArtworkUpdate,
		EventTypeArtworkDelete,
	}
}

// String implements the Stringer interface.
func (x EventType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x EventType) IsValid() bool {
	_, err := ParseEventType(string(x))
	return err == nil
}

var _EventTypeValue = map[string]EventType{
	"artwork_create": EventTypeArtworkCreate,
	"artwork_update": EventTypeArtworkUpdate,
	"artwork_delete": EventTypeArtworkDelete,
}

// ParseEventType attempts to convert a string to a EventType.
func ParseEventType(name string) (EventType, error) {
	if x, ok := _EventTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _EventTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return EventType(""), fmt.Errorf("%s is %w", name, ErrInvalidEventType)
}
